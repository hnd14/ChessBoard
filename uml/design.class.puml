@startuml Class Design
abstract Requirement
class ChessReq1
class ChessReq2

abstract Effect
' class ChessEff1
' class ChessEff2

class Move {
    - requirements: [Requirement]
    - effects: [Effect]
    + getRequirements(): [Requirement]
    + getEffect(): [Effect]
}

class PieceState

abstract Position
class ChessPosition {
    - x
    - y
    + getX()
    + getY()
}

abstract Side

class BlackSide
class WhiteSide

interface PieceType {
    + name: String
    + getCandidateMoves(ps: PieceState): [Move]
}
' class Pawn
' class King
class Queen


class BoardState {

}

interface RequirementVerifier {
    + verify(req: Requirement, state: BoardState): boolean
}
class ChessReqVerifier
class ChessReq1Verifier
class ChessReq2Verifier

' interface EffectApplier {
'     + apply(eff: Effect, state: BoardState): BoardState
' }

class Piece {

}

class Board

Move "1"-d-o "0..n" Requirement
Move "1"-d-o "0..n" Effect
PieceType .d.> Move
PieceType .d.> PieceState

' Requirement o.. Requirement
' Effect o.. Effect

Piece --o PieceType
Piece -r-* PieceState
PieceState --o Position
PieceState --o Side

Board "1"--o "n" Position

BoardState --o Board
BoardState "1"--o "0..n" Piece

RequirementVerifier ..> Requirement
RequirementVerifier ..> BoardState

' EffectApplier ..> Effect
' EffectApplier ..> BoardState


ChessReq1 -u--|> Requirement
ChessReq2 -u--|> Requirement

ChessEff1 -u--|> Effect
' ChessEff2 -u-> Effect
' Pawn -d-> PieceType
' Pawn ..>"use" ChessReq1
Queen -d-|> PieceType
Queen ..> ChessReq1
' King -d-> PieceType

ChessReqVerifier -d-|> RequirementVerifier
ChessReq1Verifier -d-|> RequirementVerifier
ChessReq2Verifier -d-|> RequirementVerifier
ChessReqVerifier -d-o ChessReq1Verifier
ChessReqVerifier -d-o ChessReq2Verifier
ChessReq1Verifier ..> ChessReq1
ChessReq2Verifier ..> ChessReq2
ChessPosition -u-|> Position

BlackSide -u-|> Side
WhiteSide -u-|> Side
@enduml