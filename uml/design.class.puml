@startuml Class Design
abstract Requirement
class ChessReq1

abstract Effect
' class ChessEff1
' class ChessEff2

class Move {
    - requirements: [Requirement]
    - effects: [Effect]
    + getRequirements(): [Requirement]
    + getEffect(): [Effect]
}

abstract Position
class ChessPosition {
    - x
    - y
    + getX()
    + getY()
}

abstract Side
interface MoveGenerator {
    + getCandidateMoves(Piece, Board): [Move]
}

class QueenMovegenerator {

}

class MoveGeneratorRegistry {
    - Map<PieceType, MoveGenerator>
    + registerMoveGenerator(PieceType, MoveGenerator)
    + getCandidateMoves(Piece, Board)
}


class BoardState {

}

interface RequirementVerifier {
    + verify(req: Requirement, state: BoardState): boolean
}
class CompositeReqVerifier {
    - verifiers: List<RequirmentVerifiers>
    + registerVerifier(verifier: RequirementVerifier)
    + verify(Collection<Requirement> requirements, boardState: boardState)
}
class ChessReq1Verifier

class Piece {

}

class Board

Move "1"-d-o "0..n" Effect
Move "1"-d--o "0..n" Requirement
MoveGeneratorRegistry "1" --o "n" MoveGenerator
MoveGeneratorRegistry ..> PieceType
MoveGeneratorRegistry ..> Piece
MoveGeneratorRegistry ..> Board

MoveGenerator ..> Piece
MoveGenerator ..> Board
MoveGenerator ..> Move

Piece --o PieceType
Piece --o Position
Piece --o Side

Board "1"--o "n" Position

BoardState --o Board
BoardState "1"--o "0..n" Piece

RequirementVerifier ..> Requirement
RequirementVerifier ..> BoardState



ChessReq1 -u-|> Requirement

ChessEff1 -u--|> Effect


ChessReq1Verifier -d-|> RequirementVerifier
CompositeReqVerifier "1"-d-o "n" RequirementVerifier
ChessReq1Verifier ......> ChessReq1
ChessPosition -u-|> Position

QueenMovegenerator -d--|> MoveGenerator

@enduml